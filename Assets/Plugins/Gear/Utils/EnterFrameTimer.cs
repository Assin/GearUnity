//
// EnterFrameTimer.cs
//
// Author:
//       Hongbin.Yang <>
//
// Copyright (c) 2014 Hongbin.Yang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;

public class EnterFrameTimer : ITicker{
	private uint _currentCount;
	private uint _delay;
	private uint _repeatCount;
	private bool _running;
	private uint _startTime;
	private uint _currentTime;
	public delegate void OnTimerDelegate();

	public delegate void OnCompleteDelegate();

	/// <summary>
	/// The on timer delegate.
	/// </summary>
	public OnTimerDelegate OnTimer;
	/// <summary>
	/// The on complete delegate.
	/// </summary>
	public OnCompleteDelegate OnComplete;

	/// <summary>
	/// Gets the current count.
	/// </summary>
	/// <value>The current count.</value>
	public uint CurrentCount {
		get{ return _currentCount;}
	}

	/// <summary>
	/// Gets or sets the delay.
	/// </summary>
	/// <value>The delay.</value>
	public uint Delay {
		get{ return _delay;}
		set{ _delay = value;}
	}

	/// <summary>
	/// Gets or sets the repeat count.
	/// </summary>
	/// <value>The repeat count.</value>
	public uint RepeatCount {
		get{ return _repeatCount;}
		set{ _repeatCount = value;}
	}

	/// <summary>
	/// Gets a value indicating whether this <see cref="EnterFrameTimer"/> is running.
	/// </summary>
	/// <value><c>true</c> if running; otherwise, <c>false</c>.</value>
	public bool Running {
		get{ return _running;}
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="EnterFrameTimer"/> class.
	/// </summary>
	/// <param name="delay">Delay.</param>
	/// <param name="repeatCount">Repeat count.</param>
	public EnterFrameTimer(uint delay, uint repeatCount = 0){
		_delay = delay;
		_repeatCount = repeatCount;
	}

	private void InvokeTimerDelegate(){
		if (OnTimer != null) {
			OnTimer();
		}
	}

	private void Run(){
		_startTime += _delay;
		InvokeTimerDelegate();
	}

	/// <summary>
	/// Reset this instance.
	/// </summary>
	public void Reset(){
		_currentCount = 0;
		_startTime = (uint)(Time.time * 1000);
	}

	/// <summary>
	/// Start this instance.
	/// </summary>
	public void Start(){
		_startTime = (uint)(Time.time * 1000);
		_running = true;
		TickRunner.GetInstance().AddTicker(this);
	}

	/// <summary>
	/// Stop this instance.
	/// </summary>
	public void Stop(){
		if (_running == true) {
			_running = false;
			TickRunner.GetInstance().RemoveTicker(this);
		}
	}

	/// <summary>
	/// Raises the tick event.
	/// </summary>
	/// <param name="delay">Delay.</param>
	public void OnTick(){
		Step();
	}

	private void Step(){
		if (_running == true) {
			_currentTime = (uint)(Time.time * 1000);
			if (_currentTime - _startTime >= _delay) {
				int times = (int)Mathf.Floor((_currentTime - _startTime) / _delay);
				for (int i = 0; i<times; i++) {
					_currentCount++;
					if (_repeatCount > 0 && _repeatCount <= _currentCount) {
						Stop();
						Run();
						if (OnComplete != null) {
							OnComplete();
						}
					} else {
						Run();
					}
				}
			}
		}
	}
}


